// Code generated by ent, DO NOT EDIT.

package randomrequest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldContainsFold(FieldID, id))
}

// BlockNumber applies equality check predicate on the "blockNumber" field. It's identical to BlockNumberEQ.
func BlockNumber(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldBlockNumber, v))
}

// LogIndex applies equality check predicate on the "logIndex" field. It's identical to LogIndexEQ.
func LogIndex(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldLogIndex, v))
}

// Raw applies equality check predicate on the "raw" field. It's identical to RawEQ.
func Raw(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldRaw, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldPeriod, v))
}

// PreviousBeacon applies equality check predicate on the "previousBeacon" field. It's identical to PreviousBeaconEQ.
func PreviousBeacon(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldPreviousBeacon, v))
}

// BlockNumberEQ applies the EQ predicate on the "blockNumber" field.
func BlockNumberEQ(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "blockNumber" field.
func BlockNumberNEQ(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "blockNumber" field.
func BlockNumberIn(vs ...uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "blockNumber" field.
func BlockNumberNotIn(vs ...uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "blockNumber" field.
func BlockNumberGT(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "blockNumber" field.
func BlockNumberGTE(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "blockNumber" field.
func BlockNumberLT(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "blockNumber" field.
func BlockNumberLTE(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLTE(FieldBlockNumber, v))
}

// LogIndexEQ applies the EQ predicate on the "logIndex" field.
func LogIndexEQ(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldLogIndex, v))
}

// LogIndexNEQ applies the NEQ predicate on the "logIndex" field.
func LogIndexNEQ(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNEQ(FieldLogIndex, v))
}

// LogIndexIn applies the In predicate on the "logIndex" field.
func LogIndexIn(vs ...uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldIn(FieldLogIndex, vs...))
}

// LogIndexNotIn applies the NotIn predicate on the "logIndex" field.
func LogIndexNotIn(vs ...uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNotIn(FieldLogIndex, vs...))
}

// LogIndexGT applies the GT predicate on the "logIndex" field.
func LogIndexGT(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGT(FieldLogIndex, v))
}

// LogIndexGTE applies the GTE predicate on the "logIndex" field.
func LogIndexGTE(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGTE(FieldLogIndex, v))
}

// LogIndexLT applies the LT predicate on the "logIndex" field.
func LogIndexLT(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLT(FieldLogIndex, v))
}

// LogIndexLTE applies the LTE predicate on the "logIndex" field.
func LogIndexLTE(v uint) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLTE(FieldLogIndex, v))
}

// RawEQ applies the EQ predicate on the "raw" field.
func RawEQ(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldRaw, v))
}

// RawNEQ applies the NEQ predicate on the "raw" field.
func RawNEQ(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNEQ(FieldRaw, v))
}

// RawIn applies the In predicate on the "raw" field.
func RawIn(vs ...string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldIn(FieldRaw, vs...))
}

// RawNotIn applies the NotIn predicate on the "raw" field.
func RawNotIn(vs ...string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNotIn(FieldRaw, vs...))
}

// RawGT applies the GT predicate on the "raw" field.
func RawGT(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGT(FieldRaw, v))
}

// RawGTE applies the GTE predicate on the "raw" field.
func RawGTE(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGTE(FieldRaw, v))
}

// RawLT applies the LT predicate on the "raw" field.
func RawLT(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLT(FieldRaw, v))
}

// RawLTE applies the LTE predicate on the "raw" field.
func RawLTE(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLTE(FieldRaw, v))
}

// RawContains applies the Contains predicate on the "raw" field.
func RawContains(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldContains(FieldRaw, v))
}

// RawHasPrefix applies the HasPrefix predicate on the "raw" field.
func RawHasPrefix(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldHasPrefix(FieldRaw, v))
}

// RawHasSuffix applies the HasSuffix predicate on the "raw" field.
func RawHasSuffix(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldHasSuffix(FieldRaw, v))
}

// RawEqualFold applies the EqualFold predicate on the "raw" field.
func RawEqualFold(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEqualFold(FieldRaw, v))
}

// RawContainsFold applies the ContainsFold predicate on the "raw" field.
func RawContainsFold(v string) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldContainsFold(FieldRaw, v))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLTE(FieldPeriod, v))
}

// PreviousBeaconEQ applies the EQ predicate on the "previousBeacon" field.
func PreviousBeaconEQ(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldEQ(FieldPreviousBeacon, v))
}

// PreviousBeaconNEQ applies the NEQ predicate on the "previousBeacon" field.
func PreviousBeaconNEQ(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNEQ(FieldPreviousBeacon, v))
}

// PreviousBeaconIn applies the In predicate on the "previousBeacon" field.
func PreviousBeaconIn(vs ...uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldIn(FieldPreviousBeacon, vs...))
}

// PreviousBeaconNotIn applies the NotIn predicate on the "previousBeacon" field.
func PreviousBeaconNotIn(vs ...uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldNotIn(FieldPreviousBeacon, vs...))
}

// PreviousBeaconGT applies the GT predicate on the "previousBeacon" field.
func PreviousBeaconGT(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGT(FieldPreviousBeacon, v))
}

// PreviousBeaconGTE applies the GTE predicate on the "previousBeacon" field.
func PreviousBeaconGTE(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldGTE(FieldPreviousBeacon, v))
}

// PreviousBeaconLT applies the LT predicate on the "previousBeacon" field.
func PreviousBeaconLT(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLT(FieldPreviousBeacon, v))
}

// PreviousBeaconLTE applies the LTE predicate on the "previousBeacon" field.
func PreviousBeaconLTE(v uint64) predicate.RandomRequest {
	return predicate.RandomRequest(sql.FieldLTE(FieldPreviousBeacon, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.RandomRequest {
	return predicate.RandomRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.RandomRequest {
	return predicate.RandomRequest(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RandomRequest) predicate.RandomRequest {
	return predicate.RandomRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RandomRequest) predicate.RandomRequest {
	return predicate.RandomRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RandomRequest) predicate.RandomRequest {
	return predicate.RandomRequest(sql.NotPredicates(p))
}
