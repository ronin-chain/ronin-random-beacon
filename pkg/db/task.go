// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/task"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TxHash holds the value of the "txHash" field.
	TxHash string `json:"txHash,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// Status holds the value of the "status" field.
	Status task.Status `json:"status,omitempty"`
	// LastError holds the value of the "lastError" field.
	LastError string `json:"lastError,omitempty"`
	// ReOrg holds the value of the "reOrg" field.
	ReOrg bool `json:"reOrg,omitempty"`
	// Attempts holds the value of the "attempts" field.
	Attempts int `json:"attempts,omitempty"`
	// LastSent holds the value of the "lastSent" field.
	LastSent int `json:"lastSent,omitempty"`
	// IsFinalized holds the value of the "isFinalized" field.
	IsFinalized bool `json:"isFinalized,omitempty"`
	// SentBlock holds the value of the "sentBlock" field.
	SentBlock int `json:"sentBlock,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt int `json:"createdAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges        TaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Randomrequest holds the value of the randomrequest edge.
	Randomrequest []*RandomRequest `json:"randomrequest,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RandomrequestOrErr returns the Randomrequest value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) RandomrequestOrErr() ([]*RandomRequest, error) {
	if e.loadedTypes[0] {
		return e.Randomrequest, nil
	}
	return nil, &NotLoadedError{edge: "randomrequest"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldReOrg, task.FieldIsFinalized:
			values[i] = new(sql.NullBool)
		case task.FieldID, task.FieldAttempts, task.FieldLastSent, task.FieldSentBlock, task.FieldCreatedAt:
			values[i] = new(sql.NullInt64)
		case task.FieldTxHash, task.FieldData, task.FieldStatus, task.FieldLastError:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field txHash", values[i])
			} else if value.Valid {
				t.TxHash = value.String
			}
		case task.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				t.Data = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = task.Status(value.String)
			}
		case task.FieldLastError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastError", values[i])
			} else if value.Valid {
				t.LastError = value.String
			}
		case task.FieldReOrg:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field reOrg", values[i])
			} else if value.Valid {
				t.ReOrg = value.Bool
			}
		case task.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				t.Attempts = int(value.Int64)
			}
		case task.FieldLastSent:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field lastSent", values[i])
			} else if value.Valid {
				t.LastSent = int(value.Int64)
			}
		case task.FieldIsFinalized:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isFinalized", values[i])
			} else if value.Valid {
				t.IsFinalized = value.Bool
			}
		case task.FieldSentBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sentBlock", values[i])
			} else if value.Valid {
				t.SentBlock = int(value.Int64)
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				t.CreatedAt = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryRandomrequest queries the "randomrequest" edge of the Task entity.
func (t *Task) QueryRandomrequest() *RandomRequestQuery {
	return NewTaskClient(t.config).QueryRandomrequest(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("db: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("txHash=")
	builder.WriteString(t.TxHash)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(t.Data)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("lastError=")
	builder.WriteString(t.LastError)
	builder.WriteString(", ")
	builder.WriteString("reOrg=")
	builder.WriteString(fmt.Sprintf("%v", t.ReOrg))
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", t.Attempts))
	builder.WriteString(", ")
	builder.WriteString("lastSent=")
	builder.WriteString(fmt.Sprintf("%v", t.LastSent))
	builder.WriteString(", ")
	builder.WriteString("isFinalized=")
	builder.WriteString(fmt.Sprintf("%v", t.IsFinalized))
	builder.WriteString(", ")
	builder.WriteString("sentBlock=")
	builder.WriteString(fmt.Sprintf("%v", t.SentBlock))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
