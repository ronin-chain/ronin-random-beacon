// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/predicate"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/randomrequest"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/task"
)

// RandomRequestUpdate is the builder for updating RandomRequest entities.
type RandomRequestUpdate struct {
	config
	hooks    []Hook
	mutation *RandomRequestMutation
}

// Where appends a list predicates to the RandomRequestUpdate builder.
func (rru *RandomRequestUpdate) Where(ps ...predicate.RandomRequest) *RandomRequestUpdate {
	rru.mutation.Where(ps...)
	return rru
}

// SetBlockNumber sets the "blockNumber" field.
func (rru *RandomRequestUpdate) SetBlockNumber(u uint64) *RandomRequestUpdate {
	rru.mutation.ResetBlockNumber()
	rru.mutation.SetBlockNumber(u)
	return rru
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (rru *RandomRequestUpdate) SetNillableBlockNumber(u *uint64) *RandomRequestUpdate {
	if u != nil {
		rru.SetBlockNumber(*u)
	}
	return rru
}

// AddBlockNumber adds u to the "blockNumber" field.
func (rru *RandomRequestUpdate) AddBlockNumber(u int64) *RandomRequestUpdate {
	rru.mutation.AddBlockNumber(u)
	return rru
}

// SetLogIndex sets the "logIndex" field.
func (rru *RandomRequestUpdate) SetLogIndex(u uint) *RandomRequestUpdate {
	rru.mutation.ResetLogIndex()
	rru.mutation.SetLogIndex(u)
	return rru
}

// SetNillableLogIndex sets the "logIndex" field if the given value is not nil.
func (rru *RandomRequestUpdate) SetNillableLogIndex(u *uint) *RandomRequestUpdate {
	if u != nil {
		rru.SetLogIndex(*u)
	}
	return rru
}

// AddLogIndex adds u to the "logIndex" field.
func (rru *RandomRequestUpdate) AddLogIndex(u int) *RandomRequestUpdate {
	rru.mutation.AddLogIndex(u)
	return rru
}

// SetRaw sets the "raw" field.
func (rru *RandomRequestUpdate) SetRaw(s string) *RandomRequestUpdate {
	rru.mutation.SetRaw(s)
	return rru
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (rru *RandomRequestUpdate) SetNillableRaw(s *string) *RandomRequestUpdate {
	if s != nil {
		rru.SetRaw(*s)
	}
	return rru
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (rru *RandomRequestUpdate) SetTaskID(id int) *RandomRequestUpdate {
	rru.mutation.SetTaskID(id)
	return rru
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (rru *RandomRequestUpdate) SetNillableTaskID(id *int) *RandomRequestUpdate {
	if id != nil {
		rru = rru.SetTaskID(*id)
	}
	return rru
}

// SetTask sets the "task" edge to the Task entity.
func (rru *RandomRequestUpdate) SetTask(t *Task) *RandomRequestUpdate {
	return rru.SetTaskID(t.ID)
}

// Mutation returns the RandomRequestMutation object of the builder.
func (rru *RandomRequestUpdate) Mutation() *RandomRequestMutation {
	return rru.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (rru *RandomRequestUpdate) ClearTask() *RandomRequestUpdate {
	rru.mutation.ClearTask()
	return rru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rru *RandomRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rru.sqlSave, rru.mutation, rru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rru *RandomRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := rru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rru *RandomRequestUpdate) Exec(ctx context.Context) error {
	_, err := rru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rru *RandomRequestUpdate) ExecX(ctx context.Context) {
	if err := rru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rru *RandomRequestUpdate) check() error {
	if v, ok := rru.mutation.Raw(); ok {
		if err := randomrequest.RawValidator(v); err != nil {
			return &ValidationError{Name: "raw", err: fmt.Errorf(`db: validator failed for field "RandomRequest.raw": %w`, err)}
		}
	}
	return nil
}

func (rru *RandomRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(randomrequest.Table, randomrequest.Columns, sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString))
	if ps := rru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rru.mutation.BlockNumber(); ok {
		_spec.SetField(randomrequest.FieldBlockNumber, field.TypeUint64, value)
	}
	if value, ok := rru.mutation.AddedBlockNumber(); ok {
		_spec.AddField(randomrequest.FieldBlockNumber, field.TypeUint64, value)
	}
	if value, ok := rru.mutation.LogIndex(); ok {
		_spec.SetField(randomrequest.FieldLogIndex, field.TypeUint, value)
	}
	if value, ok := rru.mutation.AddedLogIndex(); ok {
		_spec.AddField(randomrequest.FieldLogIndex, field.TypeUint, value)
	}
	if value, ok := rru.mutation.Raw(); ok {
		_spec.SetField(randomrequest.FieldRaw, field.TypeString, value)
	}
	if rru.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   randomrequest.TaskTable,
			Columns: []string{randomrequest.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rru.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   randomrequest.TaskTable,
			Columns: []string{randomrequest.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{randomrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rru.mutation.done = true
	return n, nil
}

// RandomRequestUpdateOne is the builder for updating a single RandomRequest entity.
type RandomRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RandomRequestMutation
}

// SetBlockNumber sets the "blockNumber" field.
func (rruo *RandomRequestUpdateOne) SetBlockNumber(u uint64) *RandomRequestUpdateOne {
	rruo.mutation.ResetBlockNumber()
	rruo.mutation.SetBlockNumber(u)
	return rruo
}

// SetNillableBlockNumber sets the "blockNumber" field if the given value is not nil.
func (rruo *RandomRequestUpdateOne) SetNillableBlockNumber(u *uint64) *RandomRequestUpdateOne {
	if u != nil {
		rruo.SetBlockNumber(*u)
	}
	return rruo
}

// AddBlockNumber adds u to the "blockNumber" field.
func (rruo *RandomRequestUpdateOne) AddBlockNumber(u int64) *RandomRequestUpdateOne {
	rruo.mutation.AddBlockNumber(u)
	return rruo
}

// SetLogIndex sets the "logIndex" field.
func (rruo *RandomRequestUpdateOne) SetLogIndex(u uint) *RandomRequestUpdateOne {
	rruo.mutation.ResetLogIndex()
	rruo.mutation.SetLogIndex(u)
	return rruo
}

// SetNillableLogIndex sets the "logIndex" field if the given value is not nil.
func (rruo *RandomRequestUpdateOne) SetNillableLogIndex(u *uint) *RandomRequestUpdateOne {
	if u != nil {
		rruo.SetLogIndex(*u)
	}
	return rruo
}

// AddLogIndex adds u to the "logIndex" field.
func (rruo *RandomRequestUpdateOne) AddLogIndex(u int) *RandomRequestUpdateOne {
	rruo.mutation.AddLogIndex(u)
	return rruo
}

// SetRaw sets the "raw" field.
func (rruo *RandomRequestUpdateOne) SetRaw(s string) *RandomRequestUpdateOne {
	rruo.mutation.SetRaw(s)
	return rruo
}

// SetNillableRaw sets the "raw" field if the given value is not nil.
func (rruo *RandomRequestUpdateOne) SetNillableRaw(s *string) *RandomRequestUpdateOne {
	if s != nil {
		rruo.SetRaw(*s)
	}
	return rruo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (rruo *RandomRequestUpdateOne) SetTaskID(id int) *RandomRequestUpdateOne {
	rruo.mutation.SetTaskID(id)
	return rruo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (rruo *RandomRequestUpdateOne) SetNillableTaskID(id *int) *RandomRequestUpdateOne {
	if id != nil {
		rruo = rruo.SetTaskID(*id)
	}
	return rruo
}

// SetTask sets the "task" edge to the Task entity.
func (rruo *RandomRequestUpdateOne) SetTask(t *Task) *RandomRequestUpdateOne {
	return rruo.SetTaskID(t.ID)
}

// Mutation returns the RandomRequestMutation object of the builder.
func (rruo *RandomRequestUpdateOne) Mutation() *RandomRequestMutation {
	return rruo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (rruo *RandomRequestUpdateOne) ClearTask() *RandomRequestUpdateOne {
	rruo.mutation.ClearTask()
	return rruo
}

// Where appends a list predicates to the RandomRequestUpdate builder.
func (rruo *RandomRequestUpdateOne) Where(ps ...predicate.RandomRequest) *RandomRequestUpdateOne {
	rruo.mutation.Where(ps...)
	return rruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rruo *RandomRequestUpdateOne) Select(field string, fields ...string) *RandomRequestUpdateOne {
	rruo.fields = append([]string{field}, fields...)
	return rruo
}

// Save executes the query and returns the updated RandomRequest entity.
func (rruo *RandomRequestUpdateOne) Save(ctx context.Context) (*RandomRequest, error) {
	return withHooks(ctx, rruo.sqlSave, rruo.mutation, rruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rruo *RandomRequestUpdateOne) SaveX(ctx context.Context) *RandomRequest {
	node, err := rruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rruo *RandomRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := rruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rruo *RandomRequestUpdateOne) ExecX(ctx context.Context) {
	if err := rruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rruo *RandomRequestUpdateOne) check() error {
	if v, ok := rruo.mutation.Raw(); ok {
		if err := randomrequest.RawValidator(v); err != nil {
			return &ValidationError{Name: "raw", err: fmt.Errorf(`db: validator failed for field "RandomRequest.raw": %w`, err)}
		}
	}
	return nil
}

func (rruo *RandomRequestUpdateOne) sqlSave(ctx context.Context) (_node *RandomRequest, err error) {
	if err := rruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(randomrequest.Table, randomrequest.Columns, sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString))
	id, ok := rruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "RandomRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, randomrequest.FieldID)
		for _, f := range fields {
			if !randomrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != randomrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rruo.mutation.BlockNumber(); ok {
		_spec.SetField(randomrequest.FieldBlockNumber, field.TypeUint64, value)
	}
	if value, ok := rruo.mutation.AddedBlockNumber(); ok {
		_spec.AddField(randomrequest.FieldBlockNumber, field.TypeUint64, value)
	}
	if value, ok := rruo.mutation.LogIndex(); ok {
		_spec.SetField(randomrequest.FieldLogIndex, field.TypeUint, value)
	}
	if value, ok := rruo.mutation.AddedLogIndex(); ok {
		_spec.AddField(randomrequest.FieldLogIndex, field.TypeUint, value)
	}
	if value, ok := rruo.mutation.Raw(); ok {
		_spec.SetField(randomrequest.FieldRaw, field.TypeString, value)
	}
	if rruo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   randomrequest.TaskTable,
			Columns: []string{randomrequest.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rruo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   randomrequest.TaskTable,
			Columns: []string{randomrequest.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RandomRequest{config: rruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{randomrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rruo.mutation.done = true
	return _node, nil
}
