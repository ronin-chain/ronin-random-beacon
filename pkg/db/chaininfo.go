// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/chaininfo"
)

// ChainInfo is the model entity for the ChainInfo schema.
type ChainInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ProcessedBlock holds the value of the "processed_block" field.
	ProcessedBlock uint64 `json:"processed_block,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChainInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chaininfo.FieldProcessedBlock:
			values[i] = new(sql.NullInt64)
		case chaininfo.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChainInfo fields.
func (ci *ChainInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chaininfo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ci.ID = value.String
			}
		case chaininfo.FieldProcessedBlock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field processed_block", values[i])
			} else if value.Valid {
				ci.ProcessedBlock = uint64(value.Int64)
			}
		default:
			ci.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChainInfo.
// This includes values selected through modifiers, order, etc.
func (ci *ChainInfo) Value(name string) (ent.Value, error) {
	return ci.selectValues.Get(name)
}

// Update returns a builder for updating this ChainInfo.
// Note that you need to call ChainInfo.Unwrap() before calling this method if this ChainInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *ChainInfo) Update() *ChainInfoUpdateOne {
	return NewChainInfoClient(ci.config).UpdateOne(ci)
}

// Unwrap unwraps the ChainInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *ChainInfo) Unwrap() *ChainInfo {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("db: ChainInfo is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *ChainInfo) String() string {
	var builder strings.Builder
	builder.WriteString("ChainInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("processed_block=")
	builder.WriteString(fmt.Sprintf("%v", ci.ProcessedBlock))
	builder.WriteByte(')')
	return builder.String()
}

// ChainInfos is a parsable slice of ChainInfo.
type ChainInfos []*ChainInfo
