// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/randomrequest"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/task"
)

// RandomRequestCreate is the builder for creating a RandomRequest entity.
type RandomRequestCreate struct {
	config
	mutation *RandomRequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBlockNumber sets the "blockNumber" field.
func (rrc *RandomRequestCreate) SetBlockNumber(u uint64) *RandomRequestCreate {
	rrc.mutation.SetBlockNumber(u)
	return rrc
}

// SetLogIndex sets the "logIndex" field.
func (rrc *RandomRequestCreate) SetLogIndex(u uint) *RandomRequestCreate {
	rrc.mutation.SetLogIndex(u)
	return rrc
}

// SetRaw sets the "raw" field.
func (rrc *RandomRequestCreate) SetRaw(s string) *RandomRequestCreate {
	rrc.mutation.SetRaw(s)
	return rrc
}

// SetPeriod sets the "period" field.
func (rrc *RandomRequestCreate) SetPeriod(u uint64) *RandomRequestCreate {
	rrc.mutation.SetPeriod(u)
	return rrc
}

// SetID sets the "id" field.
func (rrc *RandomRequestCreate) SetID(s string) *RandomRequestCreate {
	rrc.mutation.SetID(s)
	return rrc
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (rrc *RandomRequestCreate) SetTaskID(id int) *RandomRequestCreate {
	rrc.mutation.SetTaskID(id)
	return rrc
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (rrc *RandomRequestCreate) SetNillableTaskID(id *int) *RandomRequestCreate {
	if id != nil {
		rrc = rrc.SetTaskID(*id)
	}
	return rrc
}

// SetTask sets the "task" edge to the Task entity.
func (rrc *RandomRequestCreate) SetTask(t *Task) *RandomRequestCreate {
	return rrc.SetTaskID(t.ID)
}

// Mutation returns the RandomRequestMutation object of the builder.
func (rrc *RandomRequestCreate) Mutation() *RandomRequestMutation {
	return rrc.mutation
}

// Save creates the RandomRequest in the database.
func (rrc *RandomRequestCreate) Save(ctx context.Context) (*RandomRequest, error) {
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RandomRequestCreate) SaveX(ctx context.Context) *RandomRequest {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RandomRequestCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RandomRequestCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RandomRequestCreate) check() error {
	if _, ok := rrc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "blockNumber", err: errors.New(`db: missing required field "RandomRequest.blockNumber"`)}
	}
	if _, ok := rrc.mutation.LogIndex(); !ok {
		return &ValidationError{Name: "logIndex", err: errors.New(`db: missing required field "RandomRequest.logIndex"`)}
	}
	if _, ok := rrc.mutation.Raw(); !ok {
		return &ValidationError{Name: "raw", err: errors.New(`db: missing required field "RandomRequest.raw"`)}
	}
	if v, ok := rrc.mutation.Raw(); ok {
		if err := randomrequest.RawValidator(v); err != nil {
			return &ValidationError{Name: "raw", err: fmt.Errorf(`db: validator failed for field "RandomRequest.raw": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`db: missing required field "RandomRequest.period"`)}
	}
	if v, ok := rrc.mutation.ID(); ok {
		if err := randomrequest.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`db: validator failed for field "RandomRequest.id": %w`, err)}
		}
	}
	return nil
}

func (rrc *RandomRequestCreate) sqlSave(ctx context.Context) (*RandomRequest, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RandomRequest.ID type: %T", _spec.ID.Value)
		}
	}
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RandomRequestCreate) createSpec() (*RandomRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &RandomRequest{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(randomrequest.Table, sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString))
	)
	_spec.OnConflict = rrc.conflict
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rrc.mutation.BlockNumber(); ok {
		_spec.SetField(randomrequest.FieldBlockNumber, field.TypeUint64, value)
		_node.BlockNumber = value
	}
	if value, ok := rrc.mutation.LogIndex(); ok {
		_spec.SetField(randomrequest.FieldLogIndex, field.TypeUint, value)
		_node.LogIndex = value
	}
	if value, ok := rrc.mutation.Raw(); ok {
		_spec.SetField(randomrequest.FieldRaw, field.TypeString, value)
		_node.Raw = value
	}
	if value, ok := rrc.mutation.Period(); ok {
		_spec.SetField(randomrequest.FieldPeriod, field.TypeUint64, value)
		_node.Period = value
	}
	if nodes := rrc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   randomrequest.TaskTable,
			Columns: []string{randomrequest.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_randomrequest = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RandomRequest.Create().
//		SetBlockNumber(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RandomRequestUpsert) {
//			SetBlockNumber(v+v).
//		}).
//		Exec(ctx)
func (rrc *RandomRequestCreate) OnConflict(opts ...sql.ConflictOption) *RandomRequestUpsertOne {
	rrc.conflict = opts
	return &RandomRequestUpsertOne{
		create: rrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RandomRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrc *RandomRequestCreate) OnConflictColumns(columns ...string) *RandomRequestUpsertOne {
	rrc.conflict = append(rrc.conflict, sql.ConflictColumns(columns...))
	return &RandomRequestUpsertOne{
		create: rrc,
	}
}

type (
	// RandomRequestUpsertOne is the builder for "upsert"-ing
	//  one RandomRequest node.
	RandomRequestUpsertOne struct {
		create *RandomRequestCreate
	}

	// RandomRequestUpsert is the "OnConflict" setter.
	RandomRequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetBlockNumber sets the "blockNumber" field.
func (u *RandomRequestUpsert) SetBlockNumber(v uint64) *RandomRequestUpsert {
	u.Set(randomrequest.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "blockNumber" field to the value that was provided on create.
func (u *RandomRequestUpsert) UpdateBlockNumber() *RandomRequestUpsert {
	u.SetExcluded(randomrequest.FieldBlockNumber)
	return u
}

// AddBlockNumber adds v to the "blockNumber" field.
func (u *RandomRequestUpsert) AddBlockNumber(v uint64) *RandomRequestUpsert {
	u.Add(randomrequest.FieldBlockNumber, v)
	return u
}

// SetLogIndex sets the "logIndex" field.
func (u *RandomRequestUpsert) SetLogIndex(v uint) *RandomRequestUpsert {
	u.Set(randomrequest.FieldLogIndex, v)
	return u
}

// UpdateLogIndex sets the "logIndex" field to the value that was provided on create.
func (u *RandomRequestUpsert) UpdateLogIndex() *RandomRequestUpsert {
	u.SetExcluded(randomrequest.FieldLogIndex)
	return u
}

// AddLogIndex adds v to the "logIndex" field.
func (u *RandomRequestUpsert) AddLogIndex(v uint) *RandomRequestUpsert {
	u.Add(randomrequest.FieldLogIndex, v)
	return u
}

// SetRaw sets the "raw" field.
func (u *RandomRequestUpsert) SetRaw(v string) *RandomRequestUpsert {
	u.Set(randomrequest.FieldRaw, v)
	return u
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *RandomRequestUpsert) UpdateRaw() *RandomRequestUpsert {
	u.SetExcluded(randomrequest.FieldRaw)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RandomRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(randomrequest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RandomRequestUpsertOne) UpdateNewValues() *RandomRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(randomrequest.FieldID)
		}
		if _, exists := u.create.mutation.Period(); exists {
			s.SetIgnore(randomrequest.FieldPeriod)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RandomRequest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RandomRequestUpsertOne) Ignore() *RandomRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RandomRequestUpsertOne) DoNothing() *RandomRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RandomRequestCreate.OnConflict
// documentation for more info.
func (u *RandomRequestUpsertOne) Update(set func(*RandomRequestUpsert)) *RandomRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RandomRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetBlockNumber sets the "blockNumber" field.
func (u *RandomRequestUpsertOne) SetBlockNumber(v uint64) *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "blockNumber" field.
func (u *RandomRequestUpsertOne) AddBlockNumber(v uint64) *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "blockNumber" field to the value that was provided on create.
func (u *RandomRequestUpsertOne) UpdateBlockNumber() *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetLogIndex sets the "logIndex" field.
func (u *RandomRequestUpsertOne) SetLogIndex(v uint) *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.SetLogIndex(v)
	})
}

// AddLogIndex adds v to the "logIndex" field.
func (u *RandomRequestUpsertOne) AddLogIndex(v uint) *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.AddLogIndex(v)
	})
}

// UpdateLogIndex sets the "logIndex" field to the value that was provided on create.
func (u *RandomRequestUpsertOne) UpdateLogIndex() *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.UpdateLogIndex()
	})
}

// SetRaw sets the "raw" field.
func (u *RandomRequestUpsertOne) SetRaw(v string) *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *RandomRequestUpsertOne) UpdateRaw() *RandomRequestUpsertOne {
	return u.Update(func(s *RandomRequestUpsert) {
		s.UpdateRaw()
	})
}

// Exec executes the query.
func (u *RandomRequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for RandomRequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RandomRequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RandomRequestUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: RandomRequestUpsertOne.ID is not supported by MySQL driver. Use RandomRequestUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RandomRequestUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RandomRequestCreateBulk is the builder for creating many RandomRequest entities in bulk.
type RandomRequestCreateBulk struct {
	config
	err      error
	builders []*RandomRequestCreate
	conflict []sql.ConflictOption
}

// Save creates the RandomRequest entities in the database.
func (rrcb *RandomRequestCreateBulk) Save(ctx context.Context) ([]*RandomRequest, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RandomRequest, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RandomRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RandomRequestCreateBulk) SaveX(ctx context.Context) []*RandomRequest {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RandomRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RandomRequestCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RandomRequest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RandomRequestUpsert) {
//			SetBlockNumber(v+v).
//		}).
//		Exec(ctx)
func (rrcb *RandomRequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *RandomRequestUpsertBulk {
	rrcb.conflict = opts
	return &RandomRequestUpsertBulk{
		create: rrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RandomRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rrcb *RandomRequestCreateBulk) OnConflictColumns(columns ...string) *RandomRequestUpsertBulk {
	rrcb.conflict = append(rrcb.conflict, sql.ConflictColumns(columns...))
	return &RandomRequestUpsertBulk{
		create: rrcb,
	}
}

// RandomRequestUpsertBulk is the builder for "upsert"-ing
// a bulk of RandomRequest nodes.
type RandomRequestUpsertBulk struct {
	create *RandomRequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RandomRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(randomrequest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RandomRequestUpsertBulk) UpdateNewValues() *RandomRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(randomrequest.FieldID)
			}
			if _, exists := b.mutation.Period(); exists {
				s.SetIgnore(randomrequest.FieldPeriod)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RandomRequest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RandomRequestUpsertBulk) Ignore() *RandomRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RandomRequestUpsertBulk) DoNothing() *RandomRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RandomRequestCreateBulk.OnConflict
// documentation for more info.
func (u *RandomRequestUpsertBulk) Update(set func(*RandomRequestUpsert)) *RandomRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RandomRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetBlockNumber sets the "blockNumber" field.
func (u *RandomRequestUpsertBulk) SetBlockNumber(v uint64) *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.SetBlockNumber(v)
	})
}

// AddBlockNumber adds v to the "blockNumber" field.
func (u *RandomRequestUpsertBulk) AddBlockNumber(v uint64) *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.AddBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "blockNumber" field to the value that was provided on create.
func (u *RandomRequestUpsertBulk) UpdateBlockNumber() *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.UpdateBlockNumber()
	})
}

// SetLogIndex sets the "logIndex" field.
func (u *RandomRequestUpsertBulk) SetLogIndex(v uint) *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.SetLogIndex(v)
	})
}

// AddLogIndex adds v to the "logIndex" field.
func (u *RandomRequestUpsertBulk) AddLogIndex(v uint) *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.AddLogIndex(v)
	})
}

// UpdateLogIndex sets the "logIndex" field to the value that was provided on create.
func (u *RandomRequestUpsertBulk) UpdateLogIndex() *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.UpdateLogIndex()
	})
}

// SetRaw sets the "raw" field.
func (u *RandomRequestUpsertBulk) SetRaw(v string) *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.SetRaw(v)
	})
}

// UpdateRaw sets the "raw" field to the value that was provided on create.
func (u *RandomRequestUpsertBulk) UpdateRaw() *RandomRequestUpsertBulk {
	return u.Update(func(s *RandomRequestUpsert) {
		s.UpdateRaw()
	})
}

// Exec executes the query.
func (u *RandomRequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the RandomRequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for RandomRequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RandomRequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
