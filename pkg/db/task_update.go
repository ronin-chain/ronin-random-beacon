// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/predicate"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/randomrequest"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTxHash sets the "txHash" field.
func (tu *TaskUpdate) SetTxHash(s string) *TaskUpdate {
	tu.mutation.SetTxHash(s)
	return tu
}

// SetNillableTxHash sets the "txHash" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTxHash(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTxHash(*s)
	}
	return tu
}

// ClearTxHash clears the value of the "txHash" field.
func (tu *TaskUpdate) ClearTxHash() *TaskUpdate {
	tu.mutation.ClearTxHash()
	return tu
}

// SetData sets the "data" field.
func (tu *TaskUpdate) SetData(s string) *TaskUpdate {
	tu.mutation.SetData(s)
	return tu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableData(s *string) *TaskUpdate {
	if s != nil {
		tu.SetData(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(t task.Status) *TaskUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(t *task.Status) *TaskUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetLastError sets the "lastError" field.
func (tu *TaskUpdate) SetLastError(s string) *TaskUpdate {
	tu.mutation.SetLastError(s)
	return tu
}

// SetNillableLastError sets the "lastError" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLastError(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLastError(*s)
	}
	return tu
}

// ClearLastError clears the value of the "lastError" field.
func (tu *TaskUpdate) ClearLastError() *TaskUpdate {
	tu.mutation.ClearLastError()
	return tu
}

// SetReOrg sets the "reOrg" field.
func (tu *TaskUpdate) SetReOrg(b bool) *TaskUpdate {
	tu.mutation.SetReOrg(b)
	return tu
}

// SetNillableReOrg sets the "reOrg" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableReOrg(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetReOrg(*b)
	}
	return tu
}

// SetAttempts sets the "attempts" field.
func (tu *TaskUpdate) SetAttempts(i int) *TaskUpdate {
	tu.mutation.ResetAttempts()
	tu.mutation.SetAttempts(i)
	return tu
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAttempts(i *int) *TaskUpdate {
	if i != nil {
		tu.SetAttempts(*i)
	}
	return tu
}

// AddAttempts adds i to the "attempts" field.
func (tu *TaskUpdate) AddAttempts(i int) *TaskUpdate {
	tu.mutation.AddAttempts(i)
	return tu
}

// SetLastSent sets the "lastSent" field.
func (tu *TaskUpdate) SetLastSent(i int) *TaskUpdate {
	tu.mutation.ResetLastSent()
	tu.mutation.SetLastSent(i)
	return tu
}

// SetNillableLastSent sets the "lastSent" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLastSent(i *int) *TaskUpdate {
	if i != nil {
		tu.SetLastSent(*i)
	}
	return tu
}

// AddLastSent adds i to the "lastSent" field.
func (tu *TaskUpdate) AddLastSent(i int) *TaskUpdate {
	tu.mutation.AddLastSent(i)
	return tu
}

// ClearLastSent clears the value of the "lastSent" field.
func (tu *TaskUpdate) ClearLastSent() *TaskUpdate {
	tu.mutation.ClearLastSent()
	return tu
}

// SetIsFinalized sets the "isFinalized" field.
func (tu *TaskUpdate) SetIsFinalized(b bool) *TaskUpdate {
	tu.mutation.SetIsFinalized(b)
	return tu
}

// SetNillableIsFinalized sets the "isFinalized" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsFinalized(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsFinalized(*b)
	}
	return tu
}

// SetSentBlock sets the "sentBlock" field.
func (tu *TaskUpdate) SetSentBlock(i int) *TaskUpdate {
	tu.mutation.ResetSentBlock()
	tu.mutation.SetSentBlock(i)
	return tu
}

// SetNillableSentBlock sets the "sentBlock" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSentBlock(i *int) *TaskUpdate {
	if i != nil {
		tu.SetSentBlock(*i)
	}
	return tu
}

// AddSentBlock adds i to the "sentBlock" field.
func (tu *TaskUpdate) AddSentBlock(i int) *TaskUpdate {
	tu.mutation.AddSentBlock(i)
	return tu
}

// SetCreatedAt sets the "createdAt" field.
func (tu *TaskUpdate) SetCreatedAt(i int) *TaskUpdate {
	tu.mutation.ResetCreatedAt()
	tu.mutation.SetCreatedAt(i)
	return tu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatedAt(i *int) *TaskUpdate {
	if i != nil {
		tu.SetCreatedAt(*i)
	}
	return tu
}

// AddCreatedAt adds i to the "createdAt" field.
func (tu *TaskUpdate) AddCreatedAt(i int) *TaskUpdate {
	tu.mutation.AddCreatedAt(i)
	return tu
}

// AddRandomrequestIDs adds the "randomrequest" edge to the RandomRequest entity by IDs.
func (tu *TaskUpdate) AddRandomrequestIDs(ids ...string) *TaskUpdate {
	tu.mutation.AddRandomrequestIDs(ids...)
	return tu
}

// AddRandomrequest adds the "randomrequest" edges to the RandomRequest entity.
func (tu *TaskUpdate) AddRandomrequest(r ...*RandomRequest) *TaskUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddRandomrequestIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearRandomrequest clears all "randomrequest" edges to the RandomRequest entity.
func (tu *TaskUpdate) ClearRandomrequest() *TaskUpdate {
	tu.mutation.ClearRandomrequest()
	return tu
}

// RemoveRandomrequestIDs removes the "randomrequest" edge to RandomRequest entities by IDs.
func (tu *TaskUpdate) RemoveRandomrequestIDs(ids ...string) *TaskUpdate {
	tu.mutation.RemoveRandomrequestIDs(ids...)
	return tu
}

// RemoveRandomrequest removes "randomrequest" edges to RandomRequest entities.
func (tu *TaskUpdate) RemoveRandomrequest(r ...*RandomRequest) *TaskUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveRandomrequestIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Data(); ok {
		if err := task.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`db: validator failed for field "Task.data": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.CreatedAt(); ok {
		if err := task.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "createdAt", err: fmt.Errorf(`db: validator failed for field "Task.createdAt": %w`, err)}
		}
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TxHash(); ok {
		_spec.SetField(task.FieldTxHash, field.TypeString, value)
	}
	if tu.mutation.TxHashCleared() {
		_spec.ClearField(task.FieldTxHash, field.TypeString)
	}
	if value, ok := tu.mutation.Data(); ok {
		_spec.SetField(task.FieldData, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.LastError(); ok {
		_spec.SetField(task.FieldLastError, field.TypeString, value)
	}
	if tu.mutation.LastErrorCleared() {
		_spec.ClearField(task.FieldLastError, field.TypeString)
	}
	if value, ok := tu.mutation.ReOrg(); ok {
		_spec.SetField(task.FieldReOrg, field.TypeBool, value)
	}
	if value, ok := tu.mutation.Attempts(); ok {
		_spec.SetField(task.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAttempts(); ok {
		_spec.AddField(task.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := tu.mutation.LastSent(); ok {
		_spec.SetField(task.FieldLastSent, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedLastSent(); ok {
		_spec.AddField(task.FieldLastSent, field.TypeInt, value)
	}
	if tu.mutation.LastSentCleared() {
		_spec.ClearField(task.FieldLastSent, field.TypeInt)
	}
	if value, ok := tu.mutation.IsFinalized(); ok {
		_spec.SetField(task.FieldIsFinalized, field.TypeBool, value)
	}
	if value, ok := tu.mutation.SentBlock(); ok {
		_spec.SetField(task.FieldSentBlock, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedSentBlock(); ok {
		_spec.AddField(task.FieldSentBlock, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(task.FieldCreatedAt, field.TypeInt, value)
	}
	if tu.mutation.RandomrequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRandomrequestIDs(); len(nodes) > 0 && !tu.mutation.RandomrequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RandomrequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTxHash sets the "txHash" field.
func (tuo *TaskUpdateOne) SetTxHash(s string) *TaskUpdateOne {
	tuo.mutation.SetTxHash(s)
	return tuo
}

// SetNillableTxHash sets the "txHash" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTxHash(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTxHash(*s)
	}
	return tuo
}

// ClearTxHash clears the value of the "txHash" field.
func (tuo *TaskUpdateOne) ClearTxHash() *TaskUpdateOne {
	tuo.mutation.ClearTxHash()
	return tuo
}

// SetData sets the "data" field.
func (tuo *TaskUpdateOne) SetData(s string) *TaskUpdateOne {
	tuo.mutation.SetData(s)
	return tuo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableData(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetData(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(t task.Status) *TaskUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(t *task.Status) *TaskUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetLastError sets the "lastError" field.
func (tuo *TaskUpdateOne) SetLastError(s string) *TaskUpdateOne {
	tuo.mutation.SetLastError(s)
	return tuo
}

// SetNillableLastError sets the "lastError" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLastError(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLastError(*s)
	}
	return tuo
}

// ClearLastError clears the value of the "lastError" field.
func (tuo *TaskUpdateOne) ClearLastError() *TaskUpdateOne {
	tuo.mutation.ClearLastError()
	return tuo
}

// SetReOrg sets the "reOrg" field.
func (tuo *TaskUpdateOne) SetReOrg(b bool) *TaskUpdateOne {
	tuo.mutation.SetReOrg(b)
	return tuo
}

// SetNillableReOrg sets the "reOrg" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableReOrg(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetReOrg(*b)
	}
	return tuo
}

// SetAttempts sets the "attempts" field.
func (tuo *TaskUpdateOne) SetAttempts(i int) *TaskUpdateOne {
	tuo.mutation.ResetAttempts()
	tuo.mutation.SetAttempts(i)
	return tuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAttempts(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetAttempts(*i)
	}
	return tuo
}

// AddAttempts adds i to the "attempts" field.
func (tuo *TaskUpdateOne) AddAttempts(i int) *TaskUpdateOne {
	tuo.mutation.AddAttempts(i)
	return tuo
}

// SetLastSent sets the "lastSent" field.
func (tuo *TaskUpdateOne) SetLastSent(i int) *TaskUpdateOne {
	tuo.mutation.ResetLastSent()
	tuo.mutation.SetLastSent(i)
	return tuo
}

// SetNillableLastSent sets the "lastSent" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLastSent(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetLastSent(*i)
	}
	return tuo
}

// AddLastSent adds i to the "lastSent" field.
func (tuo *TaskUpdateOne) AddLastSent(i int) *TaskUpdateOne {
	tuo.mutation.AddLastSent(i)
	return tuo
}

// ClearLastSent clears the value of the "lastSent" field.
func (tuo *TaskUpdateOne) ClearLastSent() *TaskUpdateOne {
	tuo.mutation.ClearLastSent()
	return tuo
}

// SetIsFinalized sets the "isFinalized" field.
func (tuo *TaskUpdateOne) SetIsFinalized(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsFinalized(b)
	return tuo
}

// SetNillableIsFinalized sets the "isFinalized" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsFinalized(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsFinalized(*b)
	}
	return tuo
}

// SetSentBlock sets the "sentBlock" field.
func (tuo *TaskUpdateOne) SetSentBlock(i int) *TaskUpdateOne {
	tuo.mutation.ResetSentBlock()
	tuo.mutation.SetSentBlock(i)
	return tuo
}

// SetNillableSentBlock sets the "sentBlock" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSentBlock(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetSentBlock(*i)
	}
	return tuo
}

// AddSentBlock adds i to the "sentBlock" field.
func (tuo *TaskUpdateOne) AddSentBlock(i int) *TaskUpdateOne {
	tuo.mutation.AddSentBlock(i)
	return tuo
}

// SetCreatedAt sets the "createdAt" field.
func (tuo *TaskUpdateOne) SetCreatedAt(i int) *TaskUpdateOne {
	tuo.mutation.ResetCreatedAt()
	tuo.mutation.SetCreatedAt(i)
	return tuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatedAt(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetCreatedAt(*i)
	}
	return tuo
}

// AddCreatedAt adds i to the "createdAt" field.
func (tuo *TaskUpdateOne) AddCreatedAt(i int) *TaskUpdateOne {
	tuo.mutation.AddCreatedAt(i)
	return tuo
}

// AddRandomrequestIDs adds the "randomrequest" edge to the RandomRequest entity by IDs.
func (tuo *TaskUpdateOne) AddRandomrequestIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.AddRandomrequestIDs(ids...)
	return tuo
}

// AddRandomrequest adds the "randomrequest" edges to the RandomRequest entity.
func (tuo *TaskUpdateOne) AddRandomrequest(r ...*RandomRequest) *TaskUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddRandomrequestIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearRandomrequest clears all "randomrequest" edges to the RandomRequest entity.
func (tuo *TaskUpdateOne) ClearRandomrequest() *TaskUpdateOne {
	tuo.mutation.ClearRandomrequest()
	return tuo
}

// RemoveRandomrequestIDs removes the "randomrequest" edge to RandomRequest entities by IDs.
func (tuo *TaskUpdateOne) RemoveRandomrequestIDs(ids ...string) *TaskUpdateOne {
	tuo.mutation.RemoveRandomrequestIDs(ids...)
	return tuo
}

// RemoveRandomrequest removes "randomrequest" edges to RandomRequest entities.
func (tuo *TaskUpdateOne) RemoveRandomrequest(r ...*RandomRequest) *TaskUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveRandomrequestIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Data(); ok {
		if err := task.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`db: validator failed for field "Task.data": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.CreatedAt(); ok {
		if err := task.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "createdAt", err: fmt.Errorf(`db: validator failed for field "Task.createdAt": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TxHash(); ok {
		_spec.SetField(task.FieldTxHash, field.TypeString, value)
	}
	if tuo.mutation.TxHashCleared() {
		_spec.ClearField(task.FieldTxHash, field.TypeString)
	}
	if value, ok := tuo.mutation.Data(); ok {
		_spec.SetField(task.FieldData, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.LastError(); ok {
		_spec.SetField(task.FieldLastError, field.TypeString, value)
	}
	if tuo.mutation.LastErrorCleared() {
		_spec.ClearField(task.FieldLastError, field.TypeString)
	}
	if value, ok := tuo.mutation.ReOrg(); ok {
		_spec.SetField(task.FieldReOrg, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.Attempts(); ok {
		_spec.SetField(task.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAttempts(); ok {
		_spec.AddField(task.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.LastSent(); ok {
		_spec.SetField(task.FieldLastSent, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedLastSent(); ok {
		_spec.AddField(task.FieldLastSent, field.TypeInt, value)
	}
	if tuo.mutation.LastSentCleared() {
		_spec.ClearField(task.FieldLastSent, field.TypeInt)
	}
	if value, ok := tuo.mutation.IsFinalized(); ok {
		_spec.SetField(task.FieldIsFinalized, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.SentBlock(); ok {
		_spec.SetField(task.FieldSentBlock, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedSentBlock(); ok {
		_spec.AddField(task.FieldSentBlock, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(task.FieldCreatedAt, field.TypeInt, value)
	}
	if tuo.mutation.RandomrequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRandomrequestIDs(); len(nodes) > 0 && !tuo.mutation.RandomrequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RandomrequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
