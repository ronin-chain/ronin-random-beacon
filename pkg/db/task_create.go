// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/randomrequest"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTxHash sets the "txHash" field.
func (tc *TaskCreate) SetTxHash(s string) *TaskCreate {
	tc.mutation.SetTxHash(s)
	return tc
}

// SetNillableTxHash sets the "txHash" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTxHash(s *string) *TaskCreate {
	if s != nil {
		tc.SetTxHash(*s)
	}
	return tc
}

// SetData sets the "data" field.
func (tc *TaskCreate) SetData(s string) *TaskCreate {
	tc.mutation.SetData(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(t task.Status) *TaskCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetLastError sets the "lastError" field.
func (tc *TaskCreate) SetLastError(s string) *TaskCreate {
	tc.mutation.SetLastError(s)
	return tc
}

// SetNillableLastError sets the "lastError" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLastError(s *string) *TaskCreate {
	if s != nil {
		tc.SetLastError(*s)
	}
	return tc
}

// SetReOrg sets the "reOrg" field.
func (tc *TaskCreate) SetReOrg(b bool) *TaskCreate {
	tc.mutation.SetReOrg(b)
	return tc
}

// SetNillableReOrg sets the "reOrg" field if the given value is not nil.
func (tc *TaskCreate) SetNillableReOrg(b *bool) *TaskCreate {
	if b != nil {
		tc.SetReOrg(*b)
	}
	return tc
}

// SetAttempts sets the "attempts" field.
func (tc *TaskCreate) SetAttempts(i int) *TaskCreate {
	tc.mutation.SetAttempts(i)
	return tc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAttempts(i *int) *TaskCreate {
	if i != nil {
		tc.SetAttempts(*i)
	}
	return tc
}

// SetLastSent sets the "lastSent" field.
func (tc *TaskCreate) SetLastSent(i int) *TaskCreate {
	tc.mutation.SetLastSent(i)
	return tc
}

// SetNillableLastSent sets the "lastSent" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLastSent(i *int) *TaskCreate {
	if i != nil {
		tc.SetLastSent(*i)
	}
	return tc
}

// SetIsFinalized sets the "isFinalized" field.
func (tc *TaskCreate) SetIsFinalized(b bool) *TaskCreate {
	tc.mutation.SetIsFinalized(b)
	return tc
}

// SetNillableIsFinalized sets the "isFinalized" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsFinalized(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsFinalized(*b)
	}
	return tc
}

// SetSentBlock sets the "sentBlock" field.
func (tc *TaskCreate) SetSentBlock(i int) *TaskCreate {
	tc.mutation.SetSentBlock(i)
	return tc
}

// SetNillableSentBlock sets the "sentBlock" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSentBlock(i *int) *TaskCreate {
	if i != nil {
		tc.SetSentBlock(*i)
	}
	return tc
}

// SetCreatedAt sets the "createdAt" field.
func (tc *TaskCreate) SetCreatedAt(i int) *TaskCreate {
	tc.mutation.SetCreatedAt(i)
	return tc
}

// AddRandomrequestIDs adds the "randomrequest" edge to the RandomRequest entity by IDs.
func (tc *TaskCreate) AddRandomrequestIDs(ids ...string) *TaskCreate {
	tc.mutation.AddRandomrequestIDs(ids...)
	return tc
}

// AddRandomrequest adds the "randomrequest" edges to the RandomRequest entity.
func (tc *TaskCreate) AddRandomrequest(r ...*RandomRequest) *TaskCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tc.AddRandomrequestIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.ReOrg(); !ok {
		v := task.DefaultReOrg
		tc.mutation.SetReOrg(v)
	}
	if _, ok := tc.mutation.Attempts(); !ok {
		v := task.DefaultAttempts
		tc.mutation.SetAttempts(v)
	}
	if _, ok := tc.mutation.IsFinalized(); !ok {
		v := task.DefaultIsFinalized
		tc.mutation.SetIsFinalized(v)
	}
	if _, ok := tc.mutation.SentBlock(); !ok {
		v := task.DefaultSentBlock
		tc.mutation.SetSentBlock(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`db: missing required field "Task.data"`)}
	}
	if v, ok := tc.mutation.Data(); ok {
		if err := task.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`db: validator failed for field "Task.data": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.ReOrg(); !ok {
		return &ValidationError{Name: "reOrg", err: errors.New(`db: missing required field "Task.reOrg"`)}
	}
	if _, ok := tc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`db: missing required field "Task.attempts"`)}
	}
	if _, ok := tc.mutation.IsFinalized(); !ok {
		return &ValidationError{Name: "isFinalized", err: errors.New(`db: missing required field "Task.isFinalized"`)}
	}
	if _, ok := tc.mutation.SentBlock(); !ok {
		return &ValidationError{Name: "sentBlock", err: errors.New(`db: missing required field "Task.sentBlock"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`db: missing required field "Task.createdAt"`)}
	}
	if v, ok := tc.mutation.CreatedAt(); ok {
		if err := task.CreatedAtValidator(v); err != nil {
			return &ValidationError{Name: "createdAt", err: fmt.Errorf(`db: validator failed for field "Task.createdAt": %w`, err)}
		}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.TxHash(); ok {
		_spec.SetField(task.FieldTxHash, field.TypeString, value)
		_node.TxHash = value
	}
	if value, ok := tc.mutation.Data(); ok {
		_spec.SetField(task.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.LastError(); ok {
		_spec.SetField(task.FieldLastError, field.TypeString, value)
		_node.LastError = value
	}
	if value, ok := tc.mutation.ReOrg(); ok {
		_spec.SetField(task.FieldReOrg, field.TypeBool, value)
		_node.ReOrg = value
	}
	if value, ok := tc.mutation.Attempts(); ok {
		_spec.SetField(task.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := tc.mutation.LastSent(); ok {
		_spec.SetField(task.FieldLastSent, field.TypeInt, value)
		_node.LastSent = value
	}
	if value, ok := tc.mutation.IsFinalized(); ok {
		_spec.SetField(task.FieldIsFinalized, field.TypeBool, value)
		_node.IsFinalized = value
	}
	if value, ok := tc.mutation.SentBlock(); ok {
		_spec.SetField(task.FieldSentBlock, field.TypeInt, value)
		_node.SentBlock = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeInt, value)
		_node.CreatedAt = value
	}
	if nodes := tc.mutation.RandomrequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.RandomrequestTable,
			Columns: []string{task.RandomrequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(randomrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetTxHash(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetTxHash(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetTxHash sets the "txHash" field.
func (u *TaskUpsert) SetTxHash(v string) *TaskUpsert {
	u.Set(task.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "txHash" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTxHash() *TaskUpsert {
	u.SetExcluded(task.FieldTxHash)
	return u
}

// ClearTxHash clears the value of the "txHash" field.
func (u *TaskUpsert) ClearTxHash() *TaskUpsert {
	u.SetNull(task.FieldTxHash)
	return u
}

// SetData sets the "data" field.
func (u *TaskUpsert) SetData(v string) *TaskUpsert {
	u.Set(task.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TaskUpsert) UpdateData() *TaskUpsert {
	u.SetExcluded(task.FieldData)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v task.Status) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// SetLastError sets the "lastError" field.
func (u *TaskUpsert) SetLastError(v string) *TaskUpsert {
	u.Set(task.FieldLastError, v)
	return u
}

// UpdateLastError sets the "lastError" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLastError() *TaskUpsert {
	u.SetExcluded(task.FieldLastError)
	return u
}

// ClearLastError clears the value of the "lastError" field.
func (u *TaskUpsert) ClearLastError() *TaskUpsert {
	u.SetNull(task.FieldLastError)
	return u
}

// SetReOrg sets the "reOrg" field.
func (u *TaskUpsert) SetReOrg(v bool) *TaskUpsert {
	u.Set(task.FieldReOrg, v)
	return u
}

// UpdateReOrg sets the "reOrg" field to the value that was provided on create.
func (u *TaskUpsert) UpdateReOrg() *TaskUpsert {
	u.SetExcluded(task.FieldReOrg)
	return u
}

// SetAttempts sets the "attempts" field.
func (u *TaskUpsert) SetAttempts(v int) *TaskUpsert {
	u.Set(task.FieldAttempts, v)
	return u
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAttempts() *TaskUpsert {
	u.SetExcluded(task.FieldAttempts)
	return u
}

// AddAttempts adds v to the "attempts" field.
func (u *TaskUpsert) AddAttempts(v int) *TaskUpsert {
	u.Add(task.FieldAttempts, v)
	return u
}

// SetLastSent sets the "lastSent" field.
func (u *TaskUpsert) SetLastSent(v int) *TaskUpsert {
	u.Set(task.FieldLastSent, v)
	return u
}

// UpdateLastSent sets the "lastSent" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLastSent() *TaskUpsert {
	u.SetExcluded(task.FieldLastSent)
	return u
}

// AddLastSent adds v to the "lastSent" field.
func (u *TaskUpsert) AddLastSent(v int) *TaskUpsert {
	u.Add(task.FieldLastSent, v)
	return u
}

// ClearLastSent clears the value of the "lastSent" field.
func (u *TaskUpsert) ClearLastSent() *TaskUpsert {
	u.SetNull(task.FieldLastSent)
	return u
}

// SetIsFinalized sets the "isFinalized" field.
func (u *TaskUpsert) SetIsFinalized(v bool) *TaskUpsert {
	u.Set(task.FieldIsFinalized, v)
	return u
}

// UpdateIsFinalized sets the "isFinalized" field to the value that was provided on create.
func (u *TaskUpsert) UpdateIsFinalized() *TaskUpsert {
	u.SetExcluded(task.FieldIsFinalized)
	return u
}

// SetSentBlock sets the "sentBlock" field.
func (u *TaskUpsert) SetSentBlock(v int) *TaskUpsert {
	u.Set(task.FieldSentBlock, v)
	return u
}

// UpdateSentBlock sets the "sentBlock" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSentBlock() *TaskUpsert {
	u.SetExcluded(task.FieldSentBlock)
	return u
}

// AddSentBlock adds v to the "sentBlock" field.
func (u *TaskUpsert) AddSentBlock(v int) *TaskUpsert {
	u.Add(task.FieldSentBlock, v)
	return u
}

// SetCreatedAt sets the "createdAt" field.
func (u *TaskUpsert) SetCreatedAt(v int) *TaskUpsert {
	u.Set(task.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "createdAt" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCreatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "createdAt" field.
func (u *TaskUpsert) AddCreatedAt(v int) *TaskUpsert {
	u.Add(task.FieldCreatedAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTxHash sets the "txHash" field.
func (u *TaskUpsertOne) SetTxHash(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "txHash" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTxHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "txHash" field.
func (u *TaskUpsertOne) ClearTxHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTxHash()
	})
}

// SetData sets the "data" field.
func (u *TaskUpsertOne) SetData(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateData() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateData()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v task.Status) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetLastError sets the "lastError" field.
func (u *TaskUpsertOne) SetLastError(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "lastError" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLastError() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "lastError" field.
func (u *TaskUpsertOne) ClearLastError() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLastError()
	})
}

// SetReOrg sets the "reOrg" field.
func (u *TaskUpsertOne) SetReOrg(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetReOrg(v)
	})
}

// UpdateReOrg sets the "reOrg" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateReOrg() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateReOrg()
	})
}

// SetAttempts sets the "attempts" field.
func (u *TaskUpsertOne) SetAttempts(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *TaskUpsertOne) AddAttempts(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAttempts() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAttempts()
	})
}

// SetLastSent sets the "lastSent" field.
func (u *TaskUpsertOne) SetLastSent(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastSent(v)
	})
}

// AddLastSent adds v to the "lastSent" field.
func (u *TaskUpsertOne) AddLastSent(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddLastSent(v)
	})
}

// UpdateLastSent sets the "lastSent" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLastSent() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastSent()
	})
}

// ClearLastSent clears the value of the "lastSent" field.
func (u *TaskUpsertOne) ClearLastSent() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLastSent()
	})
}

// SetIsFinalized sets the "isFinalized" field.
func (u *TaskUpsertOne) SetIsFinalized(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetIsFinalized(v)
	})
}

// UpdateIsFinalized sets the "isFinalized" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateIsFinalized() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateIsFinalized()
	})
}

// SetSentBlock sets the "sentBlock" field.
func (u *TaskUpsertOne) SetSentBlock(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSentBlock(v)
	})
}

// AddSentBlock adds v to the "sentBlock" field.
func (u *TaskUpsertOne) AddSentBlock(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddSentBlock(v)
	})
}

// UpdateSentBlock sets the "sentBlock" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSentBlock() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSentBlock()
	})
}

// SetCreatedAt sets the "createdAt" field.
func (u *TaskUpsertOne) SetCreatedAt(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "createdAt" field.
func (u *TaskUpsertOne) AddCreatedAt(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "createdAt" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCreatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetTxHash(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTxHash sets the "txHash" field.
func (u *TaskUpsertBulk) SetTxHash(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "txHash" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTxHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "txHash" field.
func (u *TaskUpsertBulk) ClearTxHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTxHash()
	})
}

// SetData sets the "data" field.
func (u *TaskUpsertBulk) SetData(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateData() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateData()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v task.Status) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetLastError sets the "lastError" field.
func (u *TaskUpsertBulk) SetLastError(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastError(v)
	})
}

// UpdateLastError sets the "lastError" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLastError() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastError()
	})
}

// ClearLastError clears the value of the "lastError" field.
func (u *TaskUpsertBulk) ClearLastError() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLastError()
	})
}

// SetReOrg sets the "reOrg" field.
func (u *TaskUpsertBulk) SetReOrg(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetReOrg(v)
	})
}

// UpdateReOrg sets the "reOrg" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateReOrg() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateReOrg()
	})
}

// SetAttempts sets the "attempts" field.
func (u *TaskUpsertBulk) SetAttempts(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAttempts(v)
	})
}

// AddAttempts adds v to the "attempts" field.
func (u *TaskUpsertBulk) AddAttempts(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddAttempts(v)
	})
}

// UpdateAttempts sets the "attempts" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAttempts() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAttempts()
	})
}

// SetLastSent sets the "lastSent" field.
func (u *TaskUpsertBulk) SetLastSent(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastSent(v)
	})
}

// AddLastSent adds v to the "lastSent" field.
func (u *TaskUpsertBulk) AddLastSent(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddLastSent(v)
	})
}

// UpdateLastSent sets the "lastSent" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLastSent() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastSent()
	})
}

// ClearLastSent clears the value of the "lastSent" field.
func (u *TaskUpsertBulk) ClearLastSent() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLastSent()
	})
}

// SetIsFinalized sets the "isFinalized" field.
func (u *TaskUpsertBulk) SetIsFinalized(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetIsFinalized(v)
	})
}

// UpdateIsFinalized sets the "isFinalized" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateIsFinalized() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateIsFinalized()
	})
}

// SetSentBlock sets the "sentBlock" field.
func (u *TaskUpsertBulk) SetSentBlock(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSentBlock(v)
	})
}

// AddSentBlock adds v to the "sentBlock" field.
func (u *TaskUpsertBulk) AddSentBlock(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddSentBlock(v)
	})
}

// UpdateSentBlock sets the "sentBlock" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSentBlock() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSentBlock()
	})
}

// SetCreatedAt sets the "createdAt" field.
func (u *TaskUpsertBulk) SetCreatedAt(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "createdAt" field.
func (u *TaskUpsertBulk) AddCreatedAt(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "createdAt" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCreatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
