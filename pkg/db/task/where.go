// Code generated by ent, DO NOT EDIT.

package task

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ronin-chain/ronin-random-beacon/pkg/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// TxHash applies equality check predicate on the "txHash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTxHash, v))
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldData, v))
}

// LastError applies equality check predicate on the "lastError" field. It's identical to LastErrorEQ.
func LastError(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLastError, v))
}

// ReOrg applies equality check predicate on the "reOrg" field. It's identical to ReOrgEQ.
func ReOrg(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldReOrg, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAttempts, v))
}

// LastSent applies equality check predicate on the "lastSent" field. It's identical to LastSentEQ.
func LastSent(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLastSent, v))
}

// IsFinalized applies equality check predicate on the "isFinalized" field. It's identical to IsFinalizedEQ.
func IsFinalized(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsFinalized, v))
}

// SentBlock applies equality check predicate on the "sentBlock" field. It's identical to SentBlockEQ.
func SentBlock(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSentBlock, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// TxHashEQ applies the EQ predicate on the "txHash" field.
func TxHashEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "txHash" field.
func TxHashNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "txHash" field.
func TxHashIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "txHash" field.
func TxHashNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "txHash" field.
func TxHashGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "txHash" field.
func TxHashGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "txHash" field.
func TxHashLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "txHash" field.
func TxHashLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "txHash" field.
func TxHashContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "txHash" field.
func TxHashHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "txHash" field.
func TxHashHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashIsNil applies the IsNil predicate on the "txHash" field.
func TxHashIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldTxHash))
}

// TxHashNotNil applies the NotNil predicate on the "txHash" field.
func TxHashNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldTxHash))
}

// TxHashEqualFold applies the EqualFold predicate on the "txHash" field.
func TxHashEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "txHash" field.
func TxHashContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTxHash, v))
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldData, v))
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldData, v))
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldData, vs...))
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldData, vs...))
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldData, v))
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldData, v))
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldData, v))
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldData, v))
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldData, v))
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldData, v))
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldData, v))
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldData, v))
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldData, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// LastErrorEQ applies the EQ predicate on the "lastError" field.
func LastErrorEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLastError, v))
}

// LastErrorNEQ applies the NEQ predicate on the "lastError" field.
func LastErrorNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLastError, v))
}

// LastErrorIn applies the In predicate on the "lastError" field.
func LastErrorIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLastError, vs...))
}

// LastErrorNotIn applies the NotIn predicate on the "lastError" field.
func LastErrorNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLastError, vs...))
}

// LastErrorGT applies the GT predicate on the "lastError" field.
func LastErrorGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLastError, v))
}

// LastErrorGTE applies the GTE predicate on the "lastError" field.
func LastErrorGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLastError, v))
}

// LastErrorLT applies the LT predicate on the "lastError" field.
func LastErrorLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLastError, v))
}

// LastErrorLTE applies the LTE predicate on the "lastError" field.
func LastErrorLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLastError, v))
}

// LastErrorContains applies the Contains predicate on the "lastError" field.
func LastErrorContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLastError, v))
}

// LastErrorHasPrefix applies the HasPrefix predicate on the "lastError" field.
func LastErrorHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLastError, v))
}

// LastErrorHasSuffix applies the HasSuffix predicate on the "lastError" field.
func LastErrorHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLastError, v))
}

// LastErrorIsNil applies the IsNil predicate on the "lastError" field.
func LastErrorIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLastError))
}

// LastErrorNotNil applies the NotNil predicate on the "lastError" field.
func LastErrorNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLastError))
}

// LastErrorEqualFold applies the EqualFold predicate on the "lastError" field.
func LastErrorEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLastError, v))
}

// LastErrorContainsFold applies the ContainsFold predicate on the "lastError" field.
func LastErrorContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLastError, v))
}

// ReOrgEQ applies the EQ predicate on the "reOrg" field.
func ReOrgEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldReOrg, v))
}

// ReOrgNEQ applies the NEQ predicate on the "reOrg" field.
func ReOrgNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldReOrg, v))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAttempts, v))
}

// LastSentEQ applies the EQ predicate on the "lastSent" field.
func LastSentEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLastSent, v))
}

// LastSentNEQ applies the NEQ predicate on the "lastSent" field.
func LastSentNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLastSent, v))
}

// LastSentIn applies the In predicate on the "lastSent" field.
func LastSentIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLastSent, vs...))
}

// LastSentNotIn applies the NotIn predicate on the "lastSent" field.
func LastSentNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLastSent, vs...))
}

// LastSentGT applies the GT predicate on the "lastSent" field.
func LastSentGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLastSent, v))
}

// LastSentGTE applies the GTE predicate on the "lastSent" field.
func LastSentGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLastSent, v))
}

// LastSentLT applies the LT predicate on the "lastSent" field.
func LastSentLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLastSent, v))
}

// LastSentLTE applies the LTE predicate on the "lastSent" field.
func LastSentLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLastSent, v))
}

// LastSentIsNil applies the IsNil predicate on the "lastSent" field.
func LastSentIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLastSent))
}

// LastSentNotNil applies the NotNil predicate on the "lastSent" field.
func LastSentNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLastSent))
}

// IsFinalizedEQ applies the EQ predicate on the "isFinalized" field.
func IsFinalizedEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldIsFinalized, v))
}

// IsFinalizedNEQ applies the NEQ predicate on the "isFinalized" field.
func IsFinalizedNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldIsFinalized, v))
}

// SentBlockEQ applies the EQ predicate on the "sentBlock" field.
func SentBlockEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSentBlock, v))
}

// SentBlockNEQ applies the NEQ predicate on the "sentBlock" field.
func SentBlockNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSentBlock, v))
}

// SentBlockIn applies the In predicate on the "sentBlock" field.
func SentBlockIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSentBlock, vs...))
}

// SentBlockNotIn applies the NotIn predicate on the "sentBlock" field.
func SentBlockNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSentBlock, vs...))
}

// SentBlockGT applies the GT predicate on the "sentBlock" field.
func SentBlockGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSentBlock, v))
}

// SentBlockGTE applies the GTE predicate on the "sentBlock" field.
func SentBlockGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSentBlock, v))
}

// SentBlockLT applies the LT predicate on the "sentBlock" field.
func SentBlockLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSentBlock, v))
}

// SentBlockLTE applies the LTE predicate on the "sentBlock" field.
func SentBlockLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSentBlock, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// HasRandomrequest applies the HasEdge predicate on the "randomrequest" edge.
func HasRandomrequest() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RandomrequestTable, RandomrequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRandomrequestWith applies the HasEdge predicate on the "randomrequest" edge with a given conditions (other predicates).
func HasRandomrequestWith(preds ...predicate.RandomRequest) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newRandomrequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
